## 端口配置 ---------------------------------------------------------------------------------------------------
mixed-port: 7890 #🔴HTTP+Socks4混合，Win下的系统代理端口
socks-port: 1080 #🔴Socks5，代理端口
port: 8080 #🔴HTTP，代理端口
#redir-port: 7891  #🔴非linux系统无效，redir 透明代理端口
#tproxy-port: 7892  #🔴非linux系统无效，tproxy 透明代理端口

## 全局配置 ------------------------------------------------------------------------------------------------
mode: rule # rule（规则）/ global（全局）/ direct（直连）
allow-lan: true #🔴允许局域网连接
bind-address: "*" #🔴监听的本地网卡地址，*为全部
log-level: warning #🔴日志级别
ipv6: true #🔴是否接受ipv6流量
tcp-concurrent: true # TCP并发
profile: # 缓存设置
  store-selected: true # 缓存 API面板 对策略组的选择
  #store-fake-ip: true # 缓存 fakeip 映射表
#interface-name: en0  #🔴clash流量出站接口，即接口绑定
#find-process-mode: off # 进程匹配（off:关闭，alwas:开启，strict自动），tun模式下无效
#lan-allowed-ips: # 允许连接的客户端IP，默认允许全部
#- 0.0.0.0/0
#- ::/0
#lan-disallowed-ips: # 禁止连接的IP，优先级高于allow白名单
#- ~
#authentication: # http(s)/socks/mixed 的用户验证，格式："user1:pass1"，不写则禁止全部用户
#- ~
#skip-auth-prefixes: # 白名单，允许跳过用户验证的IP
#- ~
#unified-delay: false # 统一延迟计算，没啥卵用，就是界面好看
#routing-mark: 6666  # 非linux无效，路由标记，为流量提供标记以供其他应用进行流量处理

## TCP-KeepA-live配置 ------------------------------------------------------------------------------------------
keep-alive-idle: 30 # 触发心跳包的链路无活动阈值，无活动后发送心跳包检测对端是否存活
keep-alive-interval: 30 # 发送心跳包的间隔，无回应则最多重发9次后判断链路关闭
disable-keep-alive: false # 禁用 keep alive，即允许长链接一直存在

## API面板设置---------------------------------------------------------------------------------------------------
external-controller: 0.0.0.0:9090 #🔴API面板监听地址
secret: "hd54RIm0LiUpyu" #🔴API面板访问密钥
external-ui: ./ui #🔴API面板静态资源路径
external-ui-name: zashboard #🔴API面板名，配合路径拼接成路径，例如/ui/metacubexd
external-ui-url: "https://ghfast.top/https://github.com/Zephyruso/zashboard/releases/latest/download/dist.zip" #🔴API面板下载地址

## 外部资源下载设置---------------------------------------------------------------------------------------------------
global-client-fingerprint: random # 全局客户端指纹，优先级低于其他处的声明
global-ua: mihomo # 全局UA，默认为clash.meta
etag-support: true # 资源下载的 ETag 支持
geodata-mode: true # GEOIP数据模式，false:mmdb，true:dat，mmdb更新但有设备不支持
geodata-loader: standard # GEO文件加载模式，默认memconservative（小内存设备模式，即分段加载geo数据而不是全部加载）
geo-auto-update: true # GEO文件自动更新
geo-update-interval: 24 # 更新间隔，小时
geox-url: # GEO数据库下载地址，内核会按需下载，未被使用的数据库不会被下载
  geoip: "https://ghfast.top/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.dat"
  geosite: "https://ghfast.top/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://ghfast.top/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country.mmdb"
  asn: "https://ghfast.top/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"

## DNS设置---------------------------------------------------------------------------------------------------
# 客户端发起网址A的DNS，到达mihomo的DNS模块，mihomo会使用下方的配置进行DNS，得到IP后返回给客户端
# 客户端拿到IP后，再次对IP发起连接请求，此时请求会进入mihomo的规则匹配，根据匹配结果直连或者远端解析
# 也就是说DNS解析实际上会发生两次，第一次的结果并不重要，第二次只要规则正确触发远程解析，绝不会污染和劫持
# 但如果第一次拿到了0.0.0.0,127.0.0.1这样的错误IP，请求无法发给mihomo就会无法访问
# 综上所述，配置DNS没有那么重要，只要保证首次解析不要得到0.0.0.0这样的错误IP即可

public-dns: &public-dns # 快速的DNS，不关心是否存在污染和劫持，只要快就好了
  - dhcp://wan # 指定网卡DHCP获取的DNS，硬路由的wan口网卡名一般为wan
  - dhcp://eth1 # 软路由的wan口一般为最后一张网卡，eth0,eth1 双网口就是eth1
  - 223.5.5.5 # 阿里主DNS

secure-dns: &secure-dns # 加密的DNS，必须避免被解析为0.0.0.0等污染
  - https://223.5.5.5/dns-query#h3=true # 阿里主DNS，支持H3

dns:
  enable: true #🔴启用dns模块，否则采用系统DNS
  listen: 0.0.0.0:1053 #🔴DNS监听端口，仅支持udp
  enhanced-mode: redir-host #🔴DNS处理模式：redir-host/fake-ip，fake-ip更快但可能引入问题（缓存fakeip后无法故障切换）
  prefer-h3: true # DoH若支持则优先使用HTTP/3
  ipv6: true # 是否解析ipv6地址，否则返回空结果
  use-hosts: true # 查询配置文件中的 hosts
  use-system-hosts: true # 查询系统的 hosts
  proxy-server-nameserver: *secure-dns # 解析代理节点域名的DNS，不填则遵循namepolicy
  direct-nameserver: *public-dns # 解析direct组的DNS，不填则遵循namepolicy
  nameserver-policy: # 优先级高于nameserver
    "geosite:category-ads-all": rcode://success # 匹配广告域名，返回空结果
    "rule-set:🌐Direct-FISH": *public-dns # 匹配🌐Direct-FISH
    "geosite:cn,apple,private": *public-dns # 匹配中国，苹果域名，私有地址
    "geosite:geolocation-!cn": *secure-dns # 匹配非中国域名
  nameserver: *public-dns # 兜底默认DNS组，未命中 nameserver-policy 时启用
  #respect-rules: false # DNS请求遵循路由规则，需先配置好 proxy-server-nameserver，否则出现鸡蛋问题
  #fake-ip-range: 198.18.0.1/16 # fakeip 下的 IP 段设置，tun接口的默认 IPV4 地址 也使用此值作为参考
  #fake-ip-filter-mode: blacklist # 黑/白名单模式，白名单下 filter 会返回 fake-ip
  #fake-ip-filter: # fakeip过滤
  #- "geosite:category-ads-all,category-games,cn,private"
  #- "rule-set:🌐Direct-FISH"
  #default-nameserver: [223.5.5.5] # 解析DNS服务器域名的DNS，可以加密但必须为IP，如果不用DNS服务器的域名则无需配置

## hosts设置---------------------------------------------------------------------------------------------------
hosts:
  "mihomo.mihomo": 127.0.0.1

## 嗅探设置---------------------------------------------------------------------------------------------------
sniffer: # 嗅探，获取SNI中的域名，使mihomo能够反解未经自己DNS的IP请求的域名，来匹配域名规则
  enable: true # 启用sniffer
  force-dns-mapping: true # 对redir-host类型识别的流量进行强制嗅探
  parse-pure-ip: true # 对所有未获取到域名的流量进行强制嗅探
  override-destination: true # 是否使用嗅探结果作为实际访问，默认为 true
  sniff: # 需要嗅探的协议类型，仅支持 HTTP/TLS/QUIC
    TLS: # TLS协议
      ports: # 端口白名单，只针对下列端口嗅探
        - 443
        - 8443
    HTTP: # HTTP协议
      ports: # 端口白名单，只针对下列端口嗅探
        - 80
        - 8080-8880
    QUIC: # QUIC协议
      ports: # 端口白名单，只针对下列端口嗅探
        - 443
        - 8443
  force-domain: # 强制嗅探的域名
    - "+.netflix.com"
    - "+.nflxvideo.net"
    - "+.amazonaws.com"
    - "+.media.dssott.com"
  skip-domain: # 需要跳过嗅探的域名，主要解决部分站点sni字段非域名，导致嗅探结果异常的问题，如米家设备
    - "+.apple.com"
    - Mijia Cloud
    - dlg.io.mi.com
    - "+.oray.com"
    - "+.sunlogin.net"
    - geosite:cn

## tun设置---------------------------------------------------------------------------------------------------
tun:
  enable: true #🔴启用Tun接口
  stack: mixed # TUN 堆栈模式,建议 mixed（TCP：system，UDP：Gvisor）
  device: utun0 # TUN 网卡名，MacOS 只能 utun 开头
  auto-route: true # 自动设置全局路由，自动将全局流量路由进 tun
  auto-detect-interface: true # 自动选择流量的出接口（默认wan口）
  dns-hijack: # dns 劫持，将匹配到的连接导入内部 dns 模块，不书写协议则默认 udp://
    - any:53
    - tcp://any:53
  mtu: 9000 # MTU
  gso: true # 通用分段卸载
  gso-max-size: 65536 # 数据块最大长度
  exclude-package: # 安卓排除的包名
    - com.tencent.mobileqq # QQ
    - com.tencent.mm # 微信
    - com.tencent.androidqqmail # QQ邮箱
    - com.xingin.xhs # 小红书
    - idm.internet.download.manager # 1DM下载器
    - com.sausage.download # 浩克下载
    - com.eg.android.AlipayGphone # 支付宝
    - com.sgcc.wsgw.cn # 网上国网
    - com.taobao.taobao # 淘宝
    - com.jingdong.app.mall # 京东
    - com.MobileTicket # 铁路12306
    - com.chinamworld.main # 中国建设银行
    - com.jd.jrapp # 京东金融
  #auto-redirect: true # 仅Linux有效，自动配置 iptables/nftables 以重定向 TCP 连接，需要auto-route: true
  #strict-route: false # 严格路由，添加防火墙规则禁止Windows使用多DNS，有效防止DNS泄露，实测严重拖慢Windows访问速度
  #endpoint-independent-nat: false # 独立于端点的 NAT，性能可能下降，不建议不需要时开启

## 代理提供者设置---------------------------------------------------------------------------------------------------
proxy-providers-general: &proxy-providers-general # 代理提供者通用配置
  type: http # 类型，可选http/file
  interval: 86400
  proxy: DIRECT
  size-limit: 0
  override:
    tfo: false # 启用TCP Fast Open，一般都不支持
    mptcp: false # 启用TCP Multi Path，一般都不支持
    udp: true # 启用UDP
    udp-over-tcp: false # 启用UDP over TCP
    skip-cert-verify: false # 跳过证书验证

proxy-providers:
  #❗provider占位1
  #❗provider占位2
  #❗provider占位3
  #❗provider占位4

## 代理组设置---------------------------------------------------------------------------------------------------
use-all-proxy-providers: &use-all-proxy-providers # 代理组通用配置
  use:
    #❗use-provider占位1
    #❗use-provider占位2
    #❗use-provider占位3
    #❗use-provider占位4

health-check-general: &health-check-general # 代理组健康检查通用配置
  <<: *use-all-proxy-providers
  url: http://www.gstatic.com/generate_204
  interval: 30
  tolerance: 200
  lazy: true
  timeout: 5000

default-proxy: &default-proxy # 默认代理组
  proxies:
    - ✅默认代理
    - ♻️延迟最低
    - ⚠️故障切换
    - 🖐️手动切换
    - 🇭🇰香港节点
    - 🇨🇳台湾节点
    - 🇸🇬狮城节点
    - 🇯🇵日本节点
    - 🇺🇲美国节点
    - DIRECT

default-direct: &default-direct # 默认直连组
  proxies:
    - DIRECT
    - ✅默认代理
    - ♻️延迟最低
    - ⚠️故障切换
    - 🖐️手动切换
    - 🇭🇰香港节点
    - 🇨🇳台湾节点
    - 🇸🇬狮城节点
    - 🇯🇵日本节点
    - 🇺🇲美国节点

proxy-groups:
  ##################################
  - name: ♻️延迟最低
    type: url-test
    <<: *health-check-general

  - name: ⚠️故障切换
    type: fallback
    <<: *health-check-general

  - name: 🖐️手动切换
    type: select
    <<: *use-all-proxy-providers

  ##################################
  - name: ✅默认代理
    type: select
    proxies:
      - ♻️延迟最低
      - ⚠️故障切换
      - 🖐️手动切换
      - 🇭🇰香港节点
      - 🇨🇳台湾节点
      - 🇸🇬狮城节点
      - 🇯🇵日本节点
      - 🇺🇲美国节点
      - DIRECT

  - name: 🐟漏网之鱼
    type: select
    <<: *default-direct

  - name: Ⓜ️微软Copilot
    type: select
    <<: *default-proxy
    icon: https://ghfast.top/https://github.com/refined-fish/clash_rule_fish/blob/main/Icons/Microsoft_365_Copilot.png

  - name: ⏣OpenAi
    type: select
    <<: *default-proxy
    icon: https://ghfast.top/https://github.com/refined-fish/clash_rule_fish/blob/main/Icons/Chat_GPT.png

  - name: ✈️Telegram
    type: select
    <<: *default-proxy
    icon: https://ghfast.top/https://github.com/refined-fish/clash_rule_fish/blob/main/Icons/Telegram.png

  - name: 🧱GFW
    type: select
    <<: *default-proxy
    icon: https://ghfast.top/https://github.com/refined-fish/clash_rule_fish/blob/main/Icons/GFW.png

  - name: 📺巴哈姆特
    type: select
    proxies:
      - 🇭🇰香港节点
      - 🇨🇳台湾节点
    icon: https://ghfast.top/https://github.com/refined-fish/clash_rule_fish/blob/main/Icons/巴哈姆特.png

  - name: 🎮Steam
    type: select
    <<: *default-direct
    icon: https://ghfast.top/https://github.com/refined-fish/clash_rule_fish/blob/main/Icons/Steam.png

  ##################################
  - name: 🇭🇰香港节点
    type: url-test
    <<: *health-check-general
    filter: "港|HK|hk|Hong Kong|HongKong|hongkong"

  - name: 🇯🇵日本节点
    type: url-test
    <<: *health-check-general
    filter: "日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan"

  - name: 🇺🇲美国节点
    type: url-test
    <<: *health-check-general
    filter: "美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States"

  - name: 🇨🇳台湾节点
    type: url-test
    <<: *health-check-general
    filter: "台|新北|彰化|TW|Taiwan"

  - name: 🇸🇬狮城节点
    type: url-test
    <<: *health-check-general
    filter: "新加坡|坡|狮城|SG|Singapore"

## 规则提供者设置---------------------------------------------------------------------------------------------------
rule-providers-general: &rule-providers-general
  type: http
  behavior: classical
  interval: 86400

rule-providers:
  ♻️延迟最低-FISH:
    <<: *rule-providers-general
    url: https://raw.githubusercontent.com/refined-fish/clash_rule_fish/refs/heads/main/Ruleset/♻️延迟最低-FISH.yaml
    path: ./providers/rule-provider_♻️延迟最低-FISH.yaml

  🌐Direct-FISH:
    <<: *rule-providers-general
    url: https://raw.githubusercontent.com/refined-fish/clash_rule_fish/refs/heads/main/Ruleset/🌐Direct-FISH.yaml
    path: ./providers/rule-provider_🌐Direct-FISH.yaml

  Ⓜ️微软Copilot-FISH:
    <<: *rule-providers-general
    url: https://raw.githubusercontent.com/refined-fish/clash_rule_fish/refs/heads/main/Ruleset/Ⓜ️微软Copilot-FISH.yaml
    path: ./providers/rule-provider_Ⓜ️微软Copilot-FISH.yaml

## 路由规则设置---------------------------------------------------------------------------------------------------
rules:
  # FISH自定义规则块
  - RULE-SET,♻️延迟最低-FISH,✅默认代理 # FISH自定义代理
  - RULE-SET,🌐Direct-FISH,DIRECT # FISH自定义直连

  # 广告拦截与私有地址绕过块
  - GEOIP,private,DIRECT,no-resolve # 私有地址直连
  - GEOSITE,private,DIRECT # 私有地址直连

  # 代理规则块，按照使用频率/规则集大小排序
  - GEOSITE,tailscale,DIRECT # tailscale直连
  - GEOSITE,tracker,DIRECT # PT/BT直连
  - GEOSITE,category-pt,DIRECT # PT直连
  - GEOSITE,tmdb,✅默认代理 # TMDB服务，影视刮削
  - RULE-SET,Ⓜ️微软Copilot-FISH,Ⓜ️微软Copilot # 微软copilot服务
  - GEOSITE,synology,DIRECT # 群晖服务，包括QC
  - GEOSITE,openai,⏣OpenAi # OpenAi服务
  - GEOSITE,telegram,✈️Telegram # Telegram服务
  - GEOIP,telegram,✈️Telegram,no-resolve # Telegram服务IP
  - GEOSITE,category-container,✅默认代理 # 各种容器服务
  - GEOSITE,python,✅默认代理 # Python服务，例如pip直连下载较慢
  - GEOSITE,bahamut,📺巴哈姆特 # 巴哈姆特服务
  - GEOSITE,category-porn,✅默认代理 # X服务

  # 兜底规则块，一般精细的分流规则应在其上
  - GEOSITE,gfw,🧱GFW # GFW兜底
  - GEOSITE,steam,🎮Steam # Steam，默认直连，换区时修改此处，放于GFW之后是因创意工坊需始终代理
  - GEOSITE,cn,DIRECT # 中国域名
  - GEOIP,cn,DIRECT,no-resolve # 中国IP
  - MATCH,🐟漏网之鱼 # 漏网之鱼
